{:namespaces
 ({:source-url nil,
   :wiki-url "atomic-api.html",
   :name "atomic",
   :doc
   "Library to simplify interaction with SQL databases\n\nExample:\n\n  (use 'atomic)\n  (def schema (create-schema))\n\n  ; Describe a user table \n  (deftable \n    :user\n    :id\n    :name\n    (has-many :emails :email :user_id :user))\n\n  (deftable \n    :email\n    :id\n    :address\n    :user_id)\n\n  (def db (create-db \"org.sqlite.JDBC\" \"jdbc:sqlite::memory:\"))\n  (execute-sql db \"create table user (id integer primary key, name text, created_at integer)\")\n  (execute-sql db \"create table email (id integer primary key, user_id integer, address text)\")\n\n  (insert db :user {:id 1 :name \"Brandon\"})\n  (insert db :email {:address \"foo@bar.com\" :user_id 1})\n  (insert db :email {:address \"bar@bar.com\" :user_id 1})\n\n  (println (-> select \n               (from :user)\n               (join :email (on (= :email.user_id :user.id)))\n               (where (= :id 1))\n               (execute db)))\n\n  ; [{:user {:name \"Brandon\" :id 5} :email {:address \"foo@bar.com\" :user_id 1 :id 1}}\n  ;  {:user {:name \"Brandon\" :id 5} :email {:address \"bar@bar.com\" :user_id 1 :id 2}}]\n\n  ; Easy-join graph API (one/many):\n  ; Get the \"Brandon\" record, and join in the related emails\n\n  (println (one db :user :emails (= (:name \"Brandon\")))) \n  ; [{:name \"Brandon\" :id 5 :emails [{:address \"foo@bar.com\" :user_id 1 :id 1} {:address \"bar@bar.com\" :user_id 1 :id 2}]}]\n\n\n"}
  {:source-url nil,
   :wiki-url "atomic.localmap-api.html",
   :name "atomic.localmap",
   :doc
   "Mutable thread-local map data structure \n\nThis is useful for isolating state from multiple threads.  Values will be\ngarbage collected on thread destruction.\n\nUsage:\n  (let [my-map (localmap/create)]\n    (localmap/set my-map :my-key 25)\n    (localmap/to-map my-map)) ; => {:my-key 25}\n"}
  {:source-url nil,
   :wiki-url "atomic.util-api.html",
   :name "atomic.util",
   :doc nil}),
 :vars
 ({:arglists ([v]),
   :name "bind",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/bind",
   :doc "Bind a value to be escaped",
   :var-type "function",
   :line 572,
   :file "src/atomic.clj"}
  {:arglists ([a-keyword & params]),
   :name "column",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/column",
   :doc
   "Define a column\n\nArguments\nname -- string, the key of the column\noptions\n  :initial -- use this value on insert if none is provided \n  :default -- use this value on update if none is provided\n  :name -- the name of the column in the table\n\nReturns\nColumn\n",
   :var-type "function",
   :line 259,
   :file "src/atomic.clj"}
  {:arglists ([query & cols]),
   :name "columns",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/columns",
   :doc "Specify a list of (columns [:u.id [:user :id] ] ",
   :var-type "function",
   :line 509,
   :file "src/atomic.clj"}
  {:arglists ([query schema]),
   :name "compile-query",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/compile-query",
   :doc
   "Compile a query.\n\nArguments\nquery -- map, the query\n\nReturns\nA map with the following keys\n  :text -- string, the SQL text\n  :bind -- list, a list of literals to bind\n",
   :var-type "function",
   :line 759,
   :file "src/atomic.clj"}
  {:arglists ([db table props]),
   :name "create",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/create",
   :doc "Create a row, returning its insert ID",
   :var-type "function",
   :line 925,
   :file "src/atomic.clj"}
  {:arglists ([driver url & opts]),
   :name "create-db",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/create-db",
   :doc
   "Create a new db instance.\n\nA db is a handle to a schema and a database URL.  \n\nCalls to (execute db... ) and (execute-sql db) will lazily create and\nmaintain thread-local connections \n",
   :var-type "function",
   :line 75,
   :file "src/atomic.clj"}
  {:arglists ([]),
   :name "create-schema",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/create-schema",
   :doc
   "Create a schema object.\n\nSchema objects store table and foreign key definitions.  For simple\napplications this doesn't need to be called directly, usually you\ncan use the default global schema object.  This is useful if you need to\nmaintain multiple, conflicting table definitions in one\napplication. \n\nExample:\n  ; Create a schema object:\n  (def my-schema (create-schema))\n\n  ; Use my-schema in :my_table's definition:\n  (deftable :my_table {:schema my-schema}))\n",
   :var-type "function",
   :line 53,
   :file "src/atomic.clj"}
  {:arglists ([key & opts]),
   :name "deftable",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/deftable",
   :doc
   "Define a table\n\nThis has a couple of argument forms\n\nHere are some examples:\n  (deftable :company\n    :id\n    :title)\n   \n  (deftable :company\n    (column :id)\n    (column :title)\n    (has-many :employees :user :company_id)) \n\n  (deftable :company\n    (column :id)\n    (column :title)\n    {:schema some-schema}) \n\nThe first column specified defaults to the primary-key column.\n\n",
   :var-type "function",
   :line 328,
   :file "src/atomic.clj"}
  {:arglists ([a-key]),
   :name "deftype?",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/deftype?",
   :doc
   "Create a function which checks the :type of a map\n\nThis is useful for storing casual types in maps. \n\nFor example \"(deftype? car)\" will define a function named \"car?\" which checks its argument\nfor having the :type key set to :car \n\nArguments\na-key -- symbol, the name of the keyword and defined function\n",
   :var-type "macro",
   :line 278,
   :file "src/atomic.clj"}
  {:arglists ([query db]),
   :name "execute",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/execute",
   :doc "Run a query against an db",
   :var-type "function",
   :line 778,
   :file "src/atomic.clj"}
  {:arglists ([db sql] [db sql params]),
   :name "execute-sql",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/execute-sql",
   :doc
   "Execute a SQL query.\n\nArguments\ndb -- db\nsql -- string, a SQL query\nparams -- [literals], a list of bind values \n\nReturns\nA map with the following keys\n :rows -- a list of row tuples if any\n :update-count -- int, the number of updated rows if any\n :generated-keys -- list, a list of generated keys (insert / sequence IDs).  Usually like [[25]] \n",
   :var-type "function",
   :line 198,
   :file "src/atomic.clj"}
  {:arglists ([key table column] [key table column reverse]),
   :name "has-many",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/has-many",
   :doc
   "Get a has-many foreign key\n\n This is used in a deftable call.\n\n For example:\n\n   (deftable :user \n     (column :id)\n     (column :name)\n     (column :company_id))\n\n  (deftable :company\n     (column :id)\n     (column :title)\n     (has-many :employees :user :company_id :employer))\n\n Arguments\n key -- keyword, the name of the relation\n table -- keyword, the name of the destination table\n column -- keyword, the column name in the destination table\n reverse -- keyword, the name of the reverse relation\n\n Returns\n A map with :type :has-many set \n ",
   :var-type "function",
   :line 131,
   :file "src/atomic.clj"}
  {:arglists ([key table column] [key table column reverse]),
   :name "has-one",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/has-one",
   :doc
   "Get a has-one foreign key\n\n This is used in a deftable call.\n\n For example:\n\n   (deftable :user \n     (column :id)\n     (column :name)\n     (column :company_id)\n     (has-one :employer :company :company_id :employees))\n\n Arguments\n key -- keyword, the name of the relation\n table -- keyword, the name of the destination table\n column -- keyword, the column name in the source table\n reverse -- keyword, the name of the reverse relation\n\n Returns\n A map with :type :has-one set\n ",
   :var-type "function",
   :line 101,
   :file "src/atomic.clj"}
  {:arglists ([op]),
   :name "infix",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/infix",
   :doc
   "Generate a function which takes two arguments\n\nFor example:\n  (infix \"+\") generates a function which takes two arguments and will\ncompile to a SQL expression like \"$left + $right\"\n",
   :var-type "function",
   :line 410,
   :file "src/atomic.clj"}
  {:arglists ([table values]),
   :name "insert-into",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/insert-into",
   :doc
   "Get an insert query\n\nUsage:\n  (-> (insert-into :user {:name \"Brandon\"})\n      (execute db))\n",
   :var-type "function",
   :line 452,
   :file "src/atomic.clj"}
  {:arglists ([db table relation-paths result-set]),
   :name "join-to",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/join-to",
   :doc
   "Join a set of dotted relation-paths to a result set.\n\nIn other words, fill-in a list of related row objects.\n\nFor instance if you have a schema like:\n\n  driver (id, name)\n  car (id, driver_id, garage_id, name)\n  garage (id, house_id)\n  house (id)\n\n(join-to db :review [:user :user.emails] [{:id 1 :user_id 3}]) =>\n  [{:id 1 :user_id 3 :user { :id 3 :emails [{:id 1 :address \"foo@bar.com\"}]}}]\n",
   :var-type "function",
   :line 817,
   :file "src/atomic.clj"}
  {:arglists ([db entity where-parts]),
   :name "make-query",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/make-query",
   :doc "make a query given an entity and some where-conditions",
   :var-type "function",
   :line 796,
   :file "src/atomic.clj"}
  {:arglists ([db entity & options]),
   :name "many",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/many",
   :doc "Get many items",
   :var-type "macro",
   :line 915,
   :file "src/atomic.clj"}
  {:arglists ([& clauses]),
   :name "on",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/on",
   :doc "Add an ON clause to a join clause\n\nSee \"where\"\n",
   :var-type "macro",
   :line 521,
   :file "src/atomic.clj"}
  {:arglists ([db entity & options]),
   :name "one",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/one",
   :doc
   "Get one item\n\nExamples\n\n  : Load a user with id 5\n  (one db :user (> :id 5)) \n\n  ; Load a user with id 3, and review and review.business joined\n  (one db :user (= :id 3) :review :review.business) \n  \n  ; Load a user with id 5 and email joined\n  (one db :user (= :id 5) :email) \n  \n  ; Load a user with id 5 and email joined\n  (one db :user (= :id 5) :emails)) \n",
   :var-type "macro",
   :line 889,
   :file "src/atomic.clj"}
  {:file "src/atomic.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/atomic-api.html#atomic/select",
   :namespace "atomic",
   :line 436,
   :var-type "var",
   :doc
   "A empty select query\n\nUsage:\n  (-> select\n      (from :user)\n      (where (= :name \"Brandon\"))\n      (execute db))\n\n",
   :name "select"}
  {:arglists ([text & values]),
   :name "sql",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/sql",
   :doc "Generate a SQL expression",
   :var-type "function",
   :line 565,
   :file "src/atomic.clj"}
  {:arglists ([db & body]),
   :name "tx",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/tx",
   :doc
   "Perform a transaction for a database\n\n When an exception occurs inside of this block, a rollback is executed and the exception is re-thrown.\n\n For example:\n   (tx db\n     (execute-sql \"delete from my_table where id = ?\" [5]))\n  \n ",
   :var-type "macro",
   :line 229,
   :file "src/atomic.clj"}
  {:arglists ([db & body]),
   :name "tx-read-only",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/tx-read-only",
   :doc
   "Run a block of commands for a database in a read-only transaction wrapper",
   :var-type "macro",
   :line 248,
   :file "src/atomic.clj"}
  {:arglists ([table values]),
   :name "update",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/update",
   :doc
   "Get an update query\n\nUsage:\n  (-> (update :user {:name \"Brandon\"})\n      (where (= :id 5))\n      (execute db))\n",
   :var-type "function",
   :line 464,
   :file "src/atomic.clj"}
  {:arglists ([query & clauses]),
   :name "where",
   :namespace "atomic",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic/where",
   :doc
   "Add a where clause to a query. \n\nArguments\nquery -- a query\nclauses* -- one or more clauses\n\nReturns\nquery\n",
   :var-type "macro",
   :line 534,
   :file "src/atomic.clj"}
  {:arglists ([]),
   :name "create",
   :namespace "atomic.localmap",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic.localmap/create",
   :doc "Create a thread local-map",
   :var-type "function",
   :line 15,
   :file "src/atomic/localmap.clj"}
  {:arglists ([localmap key]),
   :name "get",
   :namespace "atomic.localmap",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic.localmap/get",
   :doc
   "Lookup a key\n\nArguments\nlocalmap -- localmap\nkey -- the key to lookup\n",
   :var-type "function",
   :line 39,
   :file "src/atomic/localmap.clj"}
  {:arglists ([localmap key val]),
   :name "set",
   :namespace "atomic.localmap",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic.localmap/set",
   :doc
   "Set a value for key\n\nArguments\nlocalmap -- localmap\nkey -- the key \nval -- the value\n",
   :var-type "function",
   :line 61,
   :file "src/atomic/localmap.clj"}
  {:arglists ([localmap key func]),
   :name "setdefault",
   :namespace "atomic.localmap",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic.localmap/setdefault",
   :doc
   "Set a default value for key\n\nArguments\nlocalmap -- the localmap\nkey -- the key\nfunc -- get the value from this function if the key doesn't exist\n\nReturns\nthe defaulted value\n",
   :var-type "macro",
   :line 20,
   :file "src/atomic/localmap.clj"}
  {:arglists ([localmap]),
   :name "to-map",
   :namespace "atomic.localmap",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic.localmap/to-map",
   :doc
   "Get a map\n\nArguments\nlocalmap -- the localmap\n\nReturns\nmap\n",
   :var-type "function",
   :line 49,
   :file "src/atomic/localmap.clj"}
  {:arglists ([a-seq]),
   :name "all-but-last",
   :namespace "atomic.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic.util/all-but-last",
   :doc "Get all but the last element of a sequence",
   :var-type "function",
   :line 82,
   :file "src/atomic/util.clj"}
  {:arglists ([func key-paths subj]),
   :name "each-in",
   :namespace "atomic.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic.util/each-in",
   :doc "Call func for each value in subj matching key-path",
   :var-type "function",
   :line 54,
   :file "src/atomic/util.clj"}
  {:arglists ([a]),
   :name "heads",
   :namespace "atomic.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic.util/heads",
   :doc "Get all of the prefixes ef a",
   :var-type "function",
   :line 37,
   :file "src/atomic/util.clj"}
  {:arglists ([func key-paths subj]),
   :name "map-in",
   :namespace "atomic.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic.util/map-in",
   :doc "Replace each value in subj with matching key-path",
   :var-type "function",
   :line 69,
   :file "src/atomic/util.clj"}
  {:arglists ([rows key-paths]),
   :name "unflatten",
   :namespace "atomic.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic.util/unflatten",
   :doc "Build a nested result set from a set of key paths",
   :var-type "function",
   :line 112,
   :file "src/atomic/util.clj"}
  {:arglists ([& seqs]),
   :name "zipn",
   :namespace "atomic.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/atomic-api.html#atomic.util/zipn",
   :doc "Python / ML / Haskell style zip",
   :var-type "function",
   :line 17,
   :file "src/atomic/util.clj"})}
